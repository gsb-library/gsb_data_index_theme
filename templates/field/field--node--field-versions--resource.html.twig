{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}
{%
    set classes = [
        'field',
        'field--name-' ~ field_name|clean_class,
        'field--type-' ~ field_type|clean_class,
        'field--label-' ~ label_display,
        label_display == 'inline' ? 'clearfix',
    ]
%}
{%
    set title_classes = [
        'field__label',
        label_display == 'visually_hidden' ? 'visually-hidden',
    ]
%}

<div{{ attributes.addClass(classes) }}>
    <!--<div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>-->
    <label>Version: </label><select class="version__select">
        {% for item in reversed_items %}
            <option value="{{ item.version_number }}">{{ item.version_number }}</option>
        {% endfor %}
    </select>
    <div class="messages-list__item messages messages--warning" role="alert">
        <div class="messages__container">
            <div class="messages__header">
                <h2 class="visually-hidden">Warning message</h2>
                <div class="messages__icon"><svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><path d="M16 0C7.16667 0 0 7.16667 0 16C0 24.8333 7.16667 32 16 32C24.8333 32 32 24.8333 32 16C32 7.16667 24.8333 0 16 0ZM18.6667 25.9792C18.6667 26.3542 18.375 26.6667 18.0208 26.6667H14.0208C13.6458 26.6667 13.3333 26.3542 13.3333 25.9792V22.0208C13.3333 21.6458 13.6458 21.3333 14.0208 21.3333H18.0208C18.375 21.3333 18.6667 21.6458 18.6667 22.0208V25.9792ZM18.625 18.8125C18.6042 19.1042 18.2917 19.3333 17.9167 19.3333H14.0625C13.6667 19.3333 13.3542 19.1042 13.3542 18.8125L13 5.875C13 5.72917 13.0625 5.58333 13.2083 5.5C13.3333 5.39583 13.5208 5.33333 13.7083 5.33333H18.2917C18.4792 5.33333 18.6667 5.39583 18.7917 5.5C18.9375 5.58333 19 5.72917 19 5.875L18.625 18.8125Z"></path></svg></div>
            </div>
            <div class="messages__content">
                {{ past_version_text }}
            </div>
        </div>
    </div>

    {% for item in reversed_items %}
        <div{{ item.attributes.addClass('field__item').addClass('version__row__' ~ item.version_number).addClass('version__row') }}>{{ item.content }}</div>
    {% endfor %}
</div>